#!/bin/bash

UBUVER="$(lsb_release -cs)"
case `lsb_release -cs` in
	helena)
		UBUVER="karmic" ;;
	isadora)
		UBUVER="lucid" ;;
	julia)
		UBUVER="maverick" ;;
	katya)
		UBUVER="natty" ;;
	lisa)
		UBUVER="oneiric" ;;
	maya)
		UBUVER="precise" ;;
	nadia)
		UBUVER="quantal" ;;
	olivia)
		UBUVER="raring"  ;;
	luna)
		UBUVER="precise" ;;
esac

loggeduser=$(cat /tmp/.yppa_username)
homedir=$(cat /tmp/.yppa_home)

######policykit fix for KDE not setting XAUTHORITY
release="$(lsb_release -rs)"
if [[ "$release" > "11.04" || "$UBUVER" = "oneiric" || "$UBUVER" = "precise" || "$UBUVER" = "quantal" || "$UBUVER" = "raring" || "$UBUVER" = "saucy" ]]; then
	[[ -z "$XAUTHORITY" ]] && export XAUTHORITY="$homedir/.Xauthority"
fi
########
WMPID=$(ps -u $loggeduser | tail -n 1 | awk '{print $1}')
DBUS=$(egrep -z 'DBUS_SESSION_BUS_ADDRESS|DISPLAY' /proc/${WMPID}/environ | sed -r -e 's/(.)DBUS_/\1 DBUS_/' -e 's/(.)DISPLAY/\1 DISPLAY/')
########

usage() {
cat << EOF
usage: $(basename $0) [[-u|--upgrade] OLD_RELEASE NEW_RELEASE]

Change or list PPAs that can be upgraded from OLD_RELEASE to NEW_RELEASE.

OPTIONS:
   -h, --help           Show this message
   -t, --test           Don't make any changes
   -r, --regular        Re-enable PPAs automatically disabled after Ubuntu upgrade
   -u, --upgrade        Upgrade PPAs using OLD_RELEASE to use the NEW_RELEASE
   -a, --auto-upgrade   Automatically upgrade PPAs to use the current release (experimental)
   -q, --quiet          Don't output anything. Useful for scripts.

$(basename $0) is licenced under the GPL by Christian Dannie Storgaard.
Support for Ubuntu upgraded PPAs by Alin Andrei.
EOF
}

function testConnection() 
{
	testconnection=`wget --no-check-certificate --tries=3 --timeout=15 www.google.com -O /tmp/.testinternet &>/dev/null 2>&1`
	if [[ $? != 0 ]]; then
		echo  "You are not connected to the Internet. Please check your Internet connection and try again."
		yad --class="Y-PPA-Manager" --name="Y PPA Manager" --window-icon="/usr/share/icons/hicolor/128x128/apps/y-ppa-manager.png" --form --title="Internet connection error" --text="   You don't seem to be connected to the Internet.   \n   This function needs a working internet connection (and working wget)   " --button="gtk-ok:0"
		ppa_manager_run
	else
		echo Internet connection - ok
		rm /tmp/.testinternet  > /dev/null 2>&1
	fi
}

function ONLYROOT ()
{

if [[ "$UID" -ne "$ROOT_UID" ]]; then 
	yad --class="Y-PPA-Manager" --name="Y PPA Manager" --window-icon="/usr/share/icons/hicolor/128x128/apps/y-ppa-manager.png" --form --title="Error - Cannot run as regular user" --text="  Please run this command from the  \n  Y PPA Manager Advanced dialog  " --button="gtk-ok:0"
	echo "Error - Cannot run as regular user! Please run y-ppa-manager as an administrator (e.g. gksu  y-ppa-manager)"
	exit
fi

}


ONLYROOT

TEST=false
QUIET=false
UPGRADE=false
REGULAR=false
AUTO=false
OLD_RELEASE=
NEW_RELEASE=$(lsb_release -cs)

if [[ $# -eq 0 ]]; then
	usage
	exit 1
fi
while [ $# -gt 0 ] ; do
	case "$1" in
		-h|--help|'-?')
			usage
			exit 1
			;;
		-t|--test)
			TEST=true
			;;
		-q|--quiet)
			QUIET=true
			;;
		-r|--regular)
			REGULAR=true
			;;
		-u|--upgrade)
			UPGRADE=true
			;;
		-a|--auto)
			UPGRADE=true
			AUTO=true
			;;
	esac
	shift
done

url_exists() {
	rett=1
	not_found=$(wget --no-check-certificate -S --spider "$url" 2>&1 | \
	            grep -E '^\s*HTTP.*?404')
	[[ -z "$( echo $not_found)" ]] && rett=0
	return $rett
}

#replace OLD_RELEASE with NEW_RELEASE:
replace_old_new() {
Y_UPGRADE_PPA=`yad --form --class="Y-PPA-Manager" --name="Y PPA Manager" --window-icon="/usr/share/icons/hicolor/128x128/apps/y-ppa-manager.png" --text="   Will scan all existing PPAs and replace the old Ubuntu version with    \n   the new Ubuntu version you enter below (only for PPAs that work   \n   with the new Ubuntu version)   " --field="Current Ubuntu version. E.g. raring" --field="Previous Ubuntu version. E.g. quantal" --button="gtk-cancel:1" --button="gtk-ok:0"`
ret=$?
if [[ $ret -eq 0 ]]; then
	su $loggeduser -s /bin/bash -c "${DBUS} notify-send -h int:transient:1 -t 10000 -u normal --icon=object-flip-vertical \"Y PPA Manager\" \"Updating release name in working PPAs. This may take a while...\""
	NEW_RELEASE=`echo "$Y_UPGRADE_PPA" | cut -d '|' -f1`
	OLD_RELEASE=`echo "$Y_UPGRADE_PPA" | cut -d '|' -f2`
	selectok=true
else
	selectok=false
	y-ppa-cmd advanced
fi
}

#update PPAs disabled after regular upgrade:
update_after_regular_upgrade() {
yad --form --class="Y-PPA-Manager" --name="Y PPA Manager" --window-icon="/usr/share/icons/hicolor/128x128/apps/y-ppa-manager.png" --text="   Will scan all PPAs disabled after   \n   upgrade and re-enable those that work   \n   with your current Ubuntu version   " --button="gtk-cancel:1" --button="gtk-ok:0"

ret=$?
if [[ $ret -eq 0 ]]; then
	su $loggeduser -s /bin/bash -c "${DBUS} notify-send -h int:transient:1 -t 10000 -u normal --icon=object-flip-vertical \"Y PPA Manager\" \"Re-enablling working PPAs after Ubuntu upgrade. This may take a while...\""
	selectok=true
else
	selectok=false
	y-ppa-cmd advanced
fi

}

if $UPGRADE; then
	testConnection
	replace_old_new
fi

if $REGULAR; then
	testConnection
	update_after_regular_upgrade
fi


changed=false
for file in /etc/apt/sources.list.d/*; do

	if [[ $file == *.save ]]; then continue; fi

	if $UPGRADE; then
		# Check if this PPA uses an old release
		if $AUTO; then
			# Search for any PPA that doesn't use the current release
			line="$(grep -hE '^deb .*? ' $file | grep -vE " ($NEW_RELEASE|stable|testing)")"
			OLD_RELEASE=$(echo "$line" | cut -d\  -f3)
		else
			line="$(grep -whE $OLD_RELEASE $file | head -1)"
		fi
		action='upgrade'
	else
		# Check if this PPA was disabled on upgrade
		#line="$(grep -whE "disabled on upgrade" "$file" | head -1)"
		line=$(grep " # .*$UBUVER.*" "$file" | head -1)
		action='uncomment'
	fi
	
	if [[ -z $(echo $line) ]]; then continue; fi
	
	! $QUIET &&   $UPGRADE && echo "${OLD_RELEASE^} is used in: $(basename $file)"
	! $QUIET && ! $UPGRADE && echo "$(basename $file) has been disabled on distribution upgrade"
	
	! $QUIET && echo -en "\tChecking if the PPA supports ${NEW_RELEASE^}..."
	
	# Check if PPA with an updated URL exists
	if [[ $action == 'uncomment' ]]; then
		url="$(echo $line | sed -e "s/^# /#/g" -e "s/ # .*$UBUVER.*//g" | cut -d\  -f2- | tr \  \/)"
		url=${url//ubuntu/ubuntu\/dists}
	else
		url="$(echo $line | sed -e "s/^# /#/g" -e "s/ # .*$UBUVER.*//g" | cut -d\  -f2- | tr \  \/)"
		url=${url//$OLD_RELEASE/dists\/$NEW_RELEASE}
	fi
	
	# It does, change the sources.list.d file
	if url_exists "$url"; then
		! $QUIET && echo " yes."
		if ! $TEST; then

			#if [[ "$file" = "/etc/apt/sources.list" ]]; then
			#	if [[ $action == 'uncomment' ]]; then
			#		! $QUIET && echo -en "\tEnabling PPA previously disabled by distribution upgrade..."
			#		line_deb=$(echo "$line" | sed -e "s/^# //g" -e "s/ # disabled on upgrade.*//g")
			#		line_src=$(echo "$line" | sed -e "s/^# deb /# deb-src /g")
			#		line_deb_src=$(echo "$line_deb" | sed -e "s/^deb/deb-src/g")

			#		escape_line=$(echo "$line" | sed -e 's/\([[\/.*]\|\]\)/\\&/g')
			#		escape_line_deb=$(echo "$line_deb" | sed -e 's/\([[\/.*]\|\]\)/\\&/g')
			#		escape_line_src=$(echo "$line_src" | sed -e 's/\([[\/.*]\|\]\)/\\&/g')
			#		escape_line_deb_src=$(echo "$line_deb_src" | sed -e 's/\([[\/.*]\|\]\)/\\&/g')
					#echo
					#echo
					#echo line_deb $line_deb
					#echo line_src $line_src
					#echo line_deb_src $line_deb_src
					#echo escape_line $escape_line
					#echo escape_line_deb $escape_line_deb
					#echo escape_line_src $escape_line_src
					#echo escape_line_deb_src $escape_line_deb_src
					
			#		result=$(sed -i "s/${escape_line}/${escape_line_deb}/g" "$file" &>/dev/null; \
			#		     sed -i "s/${escape_line_src}/${escape_line_deb_src}/g" "$file" &>/dev/null; echo $?
			#		)
			#	else
			#		line_src=$(echo "$line" | sed -e "s/^deb/deb-src/g")
			#		line_new_release=$(echo "$line" | sed -e "s/$OLD_RELEASE/$NEW_RELEASE/g")
			#		line_src_new_release=$(echo "$line_src" | sed -e "s/$OLD_RELEASE/$NEW_RELEASE/g")
					
			#		escape_line=$(echo "$line" | sed -e 's/\([[\/.*]\|\]\)/\\&/g')
			#		escape_line_src=$(echo "$line_src" | sed -e 's/\([[\/.*]\|\]\)/\\&/g')
			#		escape_line_new_release=$(echo "$line_new_release" | sed -e 's/\([[\/.*]\|\]\)/\\&/g')
			#		escape_line_src_new_release=$(echo "$line_src_new_release" | sed -e 's/\([[\/.*]\|\]\)/\\&/g')
					
			#		! $QUIET && echo -en "\tUpdating PPA to use ${NEW_RELEASE^} instead of ${OLD_RELEASE^}..."
			#		result=$(sed -i "s/${escape_line}/${escape_line_new_release}/g" "$file" &>/dev/null; \
			#		     sed -i "s/${escape_line_src}/${escape_line_src_new_release}/g" "$file" &>/dev/null; echo $?

			#		)
			#	fi
			#else
				if [[ $action == 'uncomment' ]]; then
					! $QUIET && echo -en "\tEnabling PPA previously disabled by distribution upgrade..."
					result=$(sed -i "s/^# //g" "$file" &>/dev/null; \
				    	     sed -i "s/ # .*$UBUVER.*//g" "$file" &>/dev/null; echo $?
					)
					#fix Ubuntu 13.04+ not updating deb-src line:
				    	newdist=$(grep "^deb http" "$file" | cut -d ' ' -f3)
				    	olddist=$(grep ^deb-src "$file" | cut -d ' ' -f3)
				    	sed -i "s/$olddist/$newdist/g" "$file" &>/dev/null
				else
					! $QUIET && echo -en "\tUpdating PPA to use ${NEW_RELEASE^} instead of ${OLD_RELEASE^}..."
					result=$(sed -i "s/$OLD_RELEASE/$NEW_RELEASE/g" "$file" &>/dev/null; echo $?)
				fi
			#fi
			
			if [[ $result == 0 ]]; then
				! $QUIET && echo " done."
				changed=true
			else
				! $QUIET && echo " failed. Do you have the necessary permissions?"
			fi
		fi
	else
		! $QUIET && echo " no."
	fi
	! $QUIET && echo ""
done

if $changed && ! $QUIET; then
		apt-get update
		su $loggeduser -s /bin/bash -c "${DBUS} notify-send -h int:transient:1 -t 10000 -u normal --icon=object-flip-vertical \"Y PPA Manager\" \"Done updating PPAs\""
		y-ppa-cmd advanced
elif $selectok; then
		su $loggeduser -s /bin/bash -c "${DBUS} notify-send -h int:transient:1 -t 10000 -u normal --icon=dialog-information \"Y PPA Manager\" \"There are no PPAs to update\""
		y-ppa-cmd advanced
fi
