#!/usr/bin/python3

#Some bits of code thanks to Alex Simenduev <shamil.si@gmail.com> (via Indicator-PLaces)

import os
import signal
import dbus
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk
gi.require_version('AppIndicator3', '0.1')
from gi.repository import AppIndicator3 as AppIndicator



def item_run(w, yitem):
    if yitem == "_yppa" :
        os.system("y-pkexec")
    elif yitem == "_yppa_search":
        os.system("rm -f '/tmp/.yppa_username' '/tmp/.yppa_home' && y-pkexec search")
    elif yitem == "_yppa_add":
        os.system("rm -f '/tmp/.yppa_username' '/tmp/.yppa_home' && y-pkexec add")
    elif yitem == "_yppa_manage":
        os.system("rm -f '/tmp/.yppa_username' '/tmp/.yppa_home' && y-pkexec manage")
    elif yitem == "_yppa_adv":
        os.system("rm -f '/tmp/.yppa_username' '/tmp/.yppa_home' && y-pkexec advanced")
    elif yitem == "_yppa_set":
        os.system("rm -f '/tmp/.yppa_username' '/tmp/.yppa_home' && y-pkexec settings")
    elif yitem == "_yppa_quit":
	#todo: find a better way to exist main Y PPA Manager window, "killall yad" isn't exactly a good idea
        os.system("killall yad") 
        Gtk.main_quit()


class IndicatorY:

    def __init__(self):
        if dbus.SessionBus().request_name('instance.y-ppa-indicator') != dbus.bus.REQUEST_NAME_REPLY_PRIMARY_OWNER:
        	print("application already running")
        	exit(0)
        self.ind = AppIndicator.Indicator.new("y-ppa-indicator", "y-ppa-indicator", AppIndicator.IndicatorCategory.APPLICATION_STATUS)
        self.ind.set_status(AppIndicator.IndicatorStatus.ACTIVE)
        hud_naming = True
        try:
        	self.ind.set_property ("title", ("Y PPA Manager"))
        except:
        	hud_naming = False

        self.create_menu()

    def create_menu(self, widget = None, data = None):

        # Create menu
        menu = Gtk.Menu()

        # List items
        item = Gtk.MenuItem("Add PPA")
        item.connect("activate", item_run, "_yppa_add")
        menu.append(item)

        item = Gtk.MenuItem("Search in all Launchpad PPAs")
        item.connect("activate", item_run, "_yppa_search")
        menu.append(item)

        item = Gtk.MenuItem("Manage PPAs")
        item.connect("activate", item_run, "_yppa_manage")
        menu.append(item)

        item = Gtk.MenuItem("Advanced")
        item.connect("activate", item_run, "_yppa_adv")
        menu.append(item)

        # Show separator
        item = Gtk.SeparatorMenuItem()
        menu.append(item)

        # More items
        item = Gtk.MenuItem("Settings")
        item.connect("activate", item_run, "_yppa_set")
        menu.append(item)

        item = Gtk.MenuItem("Y PPA Manager")
        item.connect("activate", item_run, "_yppa")
        menu.append(item)

        # Quit menu item
        item = Gtk.MenuItem("Quit")
        item.connect("activate", item_run, "_yppa_quit")
        menu.append(item)

        self.ind.set_menu(menu)
        menu.show_all()

if __name__ == "__main__":
    # Catch CTRL-C
    signal.signal(signal.SIGINT, lambda signal, frame: Gtk.main_quit())

    # Run the indicator
    i = IndicatorY()
             
    # Main Gtk loop
    Gtk.main()
