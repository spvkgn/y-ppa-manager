#!/bin/bash
# Script to selectively update lists for an apt repository
#
# Copyright (C) 2012  Satyajit sahoo
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

show_info() {
echo -e "\033[0;34m$@\033[0m"
}

show_success() {
echo -e "\033[0;32m$@\033[0m"
}

show_error() {
echo -e "\033[0;31m$@\033[0m" 1>&2
}

initialize() {
# Set variables
section="main"
tempdir="/var/lib/apt/lists/partial"
# Detect the required info
codename="$(lsb_release -cs)"
release="$(lsb_release -r | cut -f2)"
# Detect the architecture
case `uname -m` in
	i386|i486|i586|i686)
		architectures=( "i386" );;
	x86_64)
		architectures=( "i386" "amd64" );;
	*)
		architectures=( "$(uname -m)" );;		
esac
# Ubuntu version for Linux Mint
case `lsb_release -cs` in
	helena)
		codename="karmic";;
	isadora)
		codename="lucid";;
	julia)
		codename="maverick";;
	katya)
		codename="natty";;
	lisa)
		codename="oneiric";;
	maya|luna)
		codename="precise";;
	nadia)
		codename="quantal";;
	olivia)
		codename="raring";;
	petra)
		codename="saucy";;
	qiana|rebecca|freya)
		codename="trusty" ;;
esac
}

# Temporary work-around for Linux Mint 16 add-apt-repository
if [ `lsb_release -cs` = "petra" ]; then
	if ! grep -q "petra" /usr/share/python-apt/templates/LinuxMint.info 2>/dev/null; then
	echo "
Suite: petra
RepositoryType: deb
BaseURI: http://packages.linuxmint.com/
MatchURI: packages.linuxmint.com
MirrorsFile-amd64: /usr/share/python-apt/templates/LinuxMint.mirrors
MirrorsFile-i386: /usr/share/python-apt/templates/LinuxMint.mirrors
Description: Linux Mint 16 'Petra'
Component: main
CompDescription: Main packages
CompDescriptionLong: Main packages
Component: upstream
CompDescription: Upstream packages
CompDescriptionLong: Upstream packages
Component: import
CompDescription: Imported packages
CompDescriptionLong: Imported packages
Component: backport
CompDescription: Backports
CompDescriptionLong: Backported packages
Component: romeo
CompDescription: Unstable packages
CompDescriptionLong: Unstable packages" >> /usr/share/python-apt/templates/LinuxMint.info
	fi
fi
# Temporary work-around for Linux Mint 17 add-apt-repository
if [ `lsb_release -cs` = "qiana" ]; then
	if ! grep -q "qiana" /usr/share/python-apt/templates/LinuxMint.info 2>/dev/null; then
	echo "
Suite: qiana
RepositoryType: deb
BaseURI: http://packages.linuxmint.com/
MatchURI: packages.linuxmint.com
MirrorsFile-amd64: /usr/share/python-apt/templates/LinuxMint.mirrors
MirrorsFile-i386: /usr/share/python-apt/templates/LinuxMint.mirrors
Description: Linux Mint 17 'Qiana'
Component: main
CompDescription: Main packages
CompDescriptionLong: Main packages
Component: upstream
CompDescription: Upstream packages
CompDescriptionLong: Upstream packages
Component: import
CompDescription: Imported packages
CompDescriptionLong: Imported packages
Component: backport
CompDescription: Backports
CompDescriptionLong: Backported packages
Component: romeo
CompDescription: Unstable packages
CompDescriptionLong: Unstable packages" >> /usr/share/python-apt/templates/LinuxMint.info
	fi
fi


parse_args() {
# Parse the arguements
while [[ $# -gt 0 ]]; do
	case "$1" in
		-a|--add)
			add="yes";;
		-f|--force)
			force="yes";;
		-n|--nocheck)
			nocheck="yes";;
		-h|--help)
			echo -e "Usage: update-ppa [options...] <sourceline>"
			echo -e ""
			echo -e "update-ppa is a script to selectively update lists for an apt repository."
			echo -e ""
			echo -e "Examples:"
			echo -e "\tupdate-ppa ppa:user/repository"
			echo -e "\tupdate-ppa http://archive.ubuntu.com/ubuntu"
			echo -e "\tupdate-ppa http://archive.ubuntu.com/ubuntu raring main"
			echo -e ""
			echo -e "Options:"
			echo -e "\t-a, --add\tadd the repository if not present on the system"
			echo -e "\t-n, --nocheck\tdo not verify file checksums"
			echo -e "\t-f, --force\tforce update lists without adding the repository"
			echo -e "\t-r, --read\tread repository list from a file"
			echo -e "\t-h, --help\tshow this help message and exit"
			exit;;
		-r|--read)
			sourcesfile="$2"
			parse_file;;
		-?|--*)
			echo -e "Unrecognized option '$1'. Try '--help' for all available options."
			exit;;
		-*)
			args=$1
			shift
			set -- $(echo "$args" | cut -c 2- | sed 's/./-& /g') "$@"
			continue;;
		*)
			if [[ $# -gt 2 && ! $2 =~ ^- && ! $3 =~ ^- ]]; then
				repoarr=( $1 $2 $3 )
				shift 2
			else
				repoarr=( $1 )
			fi
			parse_repo;;
	esac
	shift
done
}

parse_file() {
if [[ -f "$sourcesfile" && `grep "deb http://" "$sourcesfile"` ]]; then
	while read line; do
		if [[ `cat /etc/apt/sources.list /etc/apt/sources.list.d/*.list | grep "$line"` || "$force" = "yes" ]]; then
			repoarr=( $line )
			parse_repo
			update_repo
		else
			show_error "Skipped '$line'"
		fi
	done < <(grep ^deb.*http\:\/\/ "$sourcesfile" | sed -e 's/deb //g')
	exit
else
	show_error "Error reading file '$sourcesfile'!"
	exit 1
fi
}

parse_repo() {
if [[ ${repoarr[0]} =~ ^ppa\:.*\/ ]]; then
	repo="${repoarr[0]}"
	username="$(echo ${repo} | cut -f1 -d\/ | cut -f2 -d\:)"
	ppaname="$(echo ${repo} | cut -f2 -d\/)"
	repourl="http://ppa.launchpad.net/${username}/${ppaname}/ubuntu"
	fixname="$(echo ${username}-${ppaname} | sed -e 's/[.+]/_/g')"
	# Try to find the codename from the list file
	ls /etc/apt/sources.list.d/${fixname}-*.list > /dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		codename="$(cat /etc/apt/sources.list.d/${fixname}-*.list | head -1 | cut -f3 -d' ')"
	fi
elif [[ ${repoarr[0]} =~ ^http\:\/\/ && ${#repoarr[@]} -eq 1 ]]; then
		repourl="$(echo ${repoarr[0]} | sed 's/\/$//')"
		repo="${repoarr[0]}"
elif [[ ${repoarr[0]} =~ ^http\:\/\/ && ${#repoarr[@]} -eq 3 ]]; then
		repourl="$(echo ${repoarr[0]} | sed 's/\/$//')"
		repo="${repoarr[0]} ${repoarr[1]} ${repoarr[2]}"
		codename="${repoarr[1]}"
		section="${repoarr[2]}"
else
	show_error "Please pass a correct repository name or url as argument!"
	exit 1
fi
}

update_repo() {
# Unset arrays
unset urls files md5sums
# Reset error counter
errors="0"
# Determine the file names
repofile="$(echo ${repourl} | sed 's/http:\/\///g' | sed 's/\//_/g')"
# Check if root
if [[ ! $(whoami) = "root" ]]; then
	show_error "Root access is needed to continue!"
	exit 1
fi
# Check if the repository is present or not
if [[ ! `cat /etc/apt/sources.list /etc/apt/sources.list.d/*.list | grep "deb ${repourl}/\? ${codename} ${section}"` && ! "$force" = "yes" ]]; then
	if [[ "$add" = "yes" ]]; then
		response="y"
	else
		show_error "The repository '$repo' is not present on the system. Do you want to add it first? (y/n)"
		read response </dev/tty
	fi
	case $response in
		[yY])
			show_info "Adding the repository..."
			# Detect if add-apt-repository supports the -y option
			if [[ `lsb_release -cs` = "olivia" ]]; then
				/usr/lib/y-ppa-manager/add-apt-repository -y "$repo"
				mintfix=$(echo "$repo" | sed -e 's/ppa://g' -e 's/\//-/g')
				mv /etc/apt/sources.list.d/"$mintfix"-olivia.list /etc/apt/sources.list.d/"$mintfix"-raring.list
        			sed -i 's/olivia/raring/g' /etc/apt/sources.list.d/"$mintfix"-raring.list
			elif [[ `lsb_release -cs` = "petra" ]]; then
				/usr/lib/y-ppa-manager/add-apt-repository -y "$repo"
				mintfix=$(echo "$repo" | sed -e 's/ppa://g' -e 's/\//-/g')
				mv /etc/apt/sources.list.d/"$mintfix"-petra.list /etc/apt/sources.list.d/"$mintfix"-saucy.list
        			sed -i 's/petra/saucy/g' /etc/apt/sources.list.d/"$mintfix"-saucy.list
			elif [[ `lsb_release -cs` = "qiana" ]]; then
				/usr/lib/y-ppa-manager/add-apt-repository -y "$repo"
				mintfix=$(echo "$repo" | sed -e 's/ppa://g' -e 's/\//-/g')
				mv /etc/apt/sources.list.d/"$mintfix"-qiana.list /etc/apt/sources.list.d/"$mintfix"-trusty.list
        			sed -i 's/qiana/trusty/g' /etc/apt/sources.list.d/"$mintfix"-trusty.list
			elif [[ `add-apt-repository --help 2>&1 | grep "\-y, --yes"` ]]; then
				add-apt-repository -y "$repo"
			else
				add-apt-repository "$repo"
			fi;;
		*)
			show_error "You must add the repository to continue!"
			exit 1;;
	esac
fi
# Switch to a temporary directory
if [[ ! -d "$tempdir" ]]; then
	mkdir -p "$tempdir"
fi
if [[ -d "$tempdir" ]]; then
	cd "$tempdir"
else
	show_error "Failed to create temporary directory!"
	errors=$((errors+1))
fi
# Start update
show_info "Updating repository '$repo'"
show_info "Fetching index files..."
# Determine urls and file names
urls=( "${repourl}/dists/${codename}/Release" "${repourl}/dists/${codename}/Release.gpg" )
files=( "${repofile}_dists_${codename}_Release" "${repofile}_dists_${codename}_Release.gpg" )
md5sums=( "" "" )
# Get the release file to determine checksums
wget --no-check-certificate -nv "${urls[0]}" -O "${files[0]}"
# Only update sources if deb-src is present and enabled
if [[ `cat /etc/apt/sources.list /etc/apt/sources.list.d/*.list | grep "^deb-src ${repourl}/\? ${codename} ${section}"` ]]; then
	urls=( "${urls[@]}" "${repourl}/dists/${codename}/${section}/source/Sources.gz" )
	files=( "${files[@]}" "${repofile}_dists_${codename}_${section}_source_Sources" )
	md5sums=( "${md5sums[@]}" "$(sed -n '0,/MD5Sum:/d;p' ${files[0]} | sed -n '/SHA1:/q;p' | grep ${section}/source/Sources.gz | cut -d ' ' -f 2)" )
fi
# Get package lists according to architecture
for arch in "${architectures[@]}"; do
	urls=( "${urls[@]}" "${repourl}/dists/${codename}/${section}/binary-${arch}/Packages.gz" )
	files=( "${files[@]}" "${repofile}_dists_${codename}_${section}_binary-${arch}_Packages" )
	md5sums=( "${md5sums[@]}" "$(sed -n '0,/MD5Sum:/d;p' ${files[0]} | sed -n '/SHA1:/q;p' | grep ${section}/binary-${arch}/Packages.gz | cut -d ' ' -f 2)" )
done
# Fetch files to the temporary directory
for ((i=1; i < ${#urls[@]}; i++)); do
	if [[ ${urls[i]} =~ .gz$ ]]; then
		wget --no-check-certificate -nv "${urls[i]}" -O "${files[i]}".gz
		if [[ "${md5sums[i]}" = "$(md5sum ${files[i]}.gz | cut -d ' ' -f 1)" || "$nocheck" = "yes" ]]; then
			gunzip -f "${files[i]}".gz
		else
			show_error "Could not verify file!"
			rm -f "${files[i]}".gz
			errors=$((errors+1))
		fi
	else
		wget --no-check-certificate -nv "${urls[i]}" -O "${files[i]}"
	fi
done
# Move the downloaded files to correct directory
for ((i=0; i < ${#files[@]}; i++)); do
	if [[ -s "${files[i]}" ]]; then
		mv -f "${files[i]}" "/var/lib/apt/lists/"
	else
		rm -f "${files[i]}"
		errors=$((errors+1))
	fi
	if [[ ! -s "/var/lib/apt/lists/${files[i]}" ]]; then
		errors=$((errors+1))
	fi
done
# Show success message
if [[ "$errors" = "0" ]]; then
	show_success "The lists for the repository '$repo' have been successfully updated!"
	return 0
else
	show_error "Some index files could not be downloaded or lost :("
	echo -e "Possible reasons may be,\n\t[*] The repository may not be available for your Ubuntu version.\n\t[*] Faulty or no internet connection.\nOld index files, if available, will be used instead."
	return 1
fi
}

initialize
parse_args "$@"
update_repo
