#!/bin/bash
# Script to selectively update lists for an apt repository
#
# Copyright (C) 2012  Satyajit sahoo
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Set Colors
RED="\033[0;31m"
GREEN="\033[0;32m"
BLUE="\033[0;34m"
END="\033[0m"

# Set variables
section="main"
tempdir="/tmp/update-ppa"
# Detect the required info
codename="$(lsb_release -cs)"
release="$(lsb_release -r | cut -f2)"
# Detect the architecture
case `uname -m` in
	i386|i486|i586|i686)
		architectures=( "i386" );;
	x86_64)
		architectures=( "i386" "amd64" );;
	*)
		architectures=( "$(uname -m)" );;		
esac
# Ubuntu version for Linux Mint
case `lsb_release -cs` in
	helena)
		codename="karmic";;
	isadora)
		codename="lucid";;
	julia)
		codename="maverick";;
	katya)
		codename="natty";;
	lisa)
		codename="oneiric";;
	maya)
		codename="precise";;
esac
# Parse the arguement
while [[ $# -gt 0 ]]; do
case "$1" in
	-a|--add)
		add="yes"
		shift;;
	-f|--force)
		force="yes"
		shift;;
	-h|--help)
		echo -e "Usage: update-ppa <sourceline>"
		echo -e ""
		echo -e "update-ppa is a script to selectively update lists for an apt repository."
		echo -e ""
		echo -e "Examples:"
		echo -e "\tupdate-ppa ppa:user/repository"
		echo -e "\tupdate-ppa http://archive.ubuntu.com/ubuntu"
		echo -e "\tupdate-ppa http://archive.ubuntu.com/ubuntu quantal main"
		echo -e ""
		echo -e "Options:"
		echo -e "\t-a, --add\tadd the repository if not present on the system"
		echo -e "\t-f, --force\tforce update lists without adding the repository"
		echo -e "\t-h, --help\tshow this help message and exit"
		exit;;
	*)
		if [[ `echo $1 | grep "^ppa:" | grep "/"` ]]; then
			username="$(echo $1 | cut -f1 -d\/ | cut -f2 -d\:)"
			ppaname="$(echo $1 | cut -f2 -d\/)"
			repourl="http://ppa.launchpad.net/${username}/${ppaname}/ubuntu"
			repo="ppa:${username}/${ppaname}"
			# Try to find the codename from the list file
			if [[ `ls /etc/apt/sources.list.d/$username-$ppaname-*.list > /dev/null 2>&1` ]]; then
				codename="$(cat /etc/apt/sources.list.d/$username-$ppaname-*.list | head -1 | cut -f3 -d' ')"
			fi
		elif [[ `echo $1 | grep "http://"` ]]; then
			repourl="$(echo $1 | sed 's/\/$//')"
			repo="${repourl}"
		else
			echo -e $RED"Please pass a correct repository name or url as argument!"$END
			exit 1
		fi
		shift
		if [[ $# -gt 1 && ! $1 = -* && ! $2 = -* ]]; then
			codename="$1"
			section="$2"
			repo="${repourl} ${codename} ${section}"
			shift 2
		fi;;
esac
done
# Determine the file names
repofile="$(echo ${repourl} | sed 's/http:\/\///g' | sed 's/\//_/g')"
# Check if root
if [[ ! $(whoami) = "root" ]]; then
	echo -e $RED"Root access is needed to continue!"$END
	exit 1
fi
version() {
echo "$@" | awk -F. '{ printf("%d%03d\n", $1,$2); }';
}
# Check if the repository is present or not
if [[ ! `cat /etc/apt/sources.list /etc/apt/sources.list.d/*.list | grep -i "deb ${repourl}"` && ! "$force" = "yes" ]]; then
	if [[ "$add" = "yes" ]]; then
		response="y"
	else
		echo -e $RED"The repository \"${repo}\" is not present on the system. Do you want to add it first? (y/n)"$END
		read response
	fi
	case $response in
		[yY])
			echo -e $BLUE"Adding the repository..."$END
			if [[ $(version "$release") -gt $(version 11.04) || "$codename" = "oneiric" || "$codename" = "precise" || "$codename" = "quantal" ]]; then
				add-apt-repository -y "$repo"
			else
				add-apt-repository "$repo"
			fi;;
		*)
			echo -e $RED"You must add the repository to continue!"$END
			exit 1;;
	esac
fi
# Switch to a temporary directory
if [[ -d "$tempdir" ]]; then
	rm -rf "$tempdir"
fi
mkdir -p "$tempdir"
cd "$tempdir"
# Determine urls and file names
for arch in "${architectures[@]}"; do
	urls=( "${urls[@]}" "${repourl}/dists/${codename}/${section}/binary-${arch}/Packages.gz" )
	files=( "${files[@]}" "${repofile}_dists_${codename}_${section}_binary-${arch}_Packages" )
done
urls=( "${urls[@]}" "${repourl}/dists/${codename}/Release" "${repourl}/dists/${codename}/Release.gpg" "${repourl}/dists/${codename}/${section}/source/Sources.gz" )
files=( "${files[@]}" "${repofile}_dists_${codename}_Release" "${repofile}_dists_${codename}_Release.gpg" "${repofile}_dists_${codename}_${section}_source_Sources" )
# Fetch files to the temporary directory
echo -e $BLUE"Fetching index files..."$END
for ((i=0; i < "${#urls[@]}"; i++))
do
	if [[ "${urls[i]}" = *.gz ]]; then
		wget -nv "${urls[i]}" -O "${files[i]}".gz
		if [[ -s "${files[i]}".gz ]]; then
			gunzip -cf "${files[i]}".gz > "${files[i]}"
		fi
	else
		wget -nv "${urls[i]}" -O "${files[i]}"
	fi
done
# Move files to the correct location
for file in "${files[@]}"; do
	if [[ -s "$file" ]]; then
		mv -f "$file" "/var/lib/apt/lists/"
	else
		echo -e $RED"Some index files could not be downloaded or lost :("$END
		echo -e "\vPossible reasons may be,\n\v\t[*] The repository may not be available for your Ubuntu version.\n\t[*] Faulty or no internet connection.\n\vOld index files, if available, will be used instead."
		exit 1
	fi
	if [[ ! -s "/var/lib/apt/lists/${file}" ]]; then
		echo -e $RED"An error occured. Please retry :("$END
		exit 1
	fi
done
# Delete the temporary directory
cd ..
rm -rf "$tempdir"
# Show success message
echo -e $GREEN"The lists for the repository \"${repo}\" have been successfully updated!"$END
exit 0
