#!/bin/bash
# Script to selectively update lists for an apt repository
#
# Copyright (C) 2012  Satyajit sahoo
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

show_info() {
echo -e "\033[0;34m$@\033[0m"
}

show_success() {
echo -e "\033[0;32m$@\033[0m"
}

show_error() {
echo -e "\033[0;31m$@\033[0m" 1>&2
}

initialize() {
# Set variables
section="main"
tempdir="/var/lib/apt/lists/partial"
helpcheck="/tmp/add-apt-repository-help.tmp"
# Detect the required info
codename="$(lsb_release -cs)"
release="$(lsb_release -r | cut -f2)"
# Detect the architecture
case `uname -m` in
	i386|i486|i586|i686)
		architectures=( "i386" );;
	x86_64)
		architectures=( "i386" "amd64" );;
	*)
		architectures=( "$(uname -m)" );;		
esac
# Ubuntu version for Linux Mint
case `lsb_release -cs` in
	helena)
		codename="karmic";;
	isadora)
		codename="lucid";;
	julia)
		codename="maverick";;
	katya)
		codename="natty";;
	lisa)
		codename="oneiric";;
	maya)
		codename="precise";;
esac
}

parse_args() {
# Parse the arguement
while [[ $# -gt 0 ]]; do
case "$1" in
	-a|--add)
		add="yes"
		shift;;
	-f|--force)
		force="yes"
		shift;;
	-h|--help)
		echo -e "Usage: update-ppa <sourceline>"
		echo -e ""
		echo -e "update-ppa is a script to selectively update lists for an apt repository."
		echo -e ""
		echo -e "Examples:"
		echo -e "\tupdate-ppa ppa:user/repository"
		echo -e "\tupdate-ppa http://archive.ubuntu.com/ubuntu"
		echo -e "\tupdate-ppa http://archive.ubuntu.com/ubuntu quantal main"
		echo -e ""
		echo -e "Options:"
		echo -e "\t-a, --add\tadd the repository if not present on the system"
		echo -e "\t-f, --force\tforce update lists without adding the repository"
		echo -e "\t-r, --read\tread repository list from a file"
		echo -e "\t-h, --help\tshow this help message and exit"
		exit;;
	-r|--read)
		sourcesfile="$2"
		parse_file;;
	*)
		if [[ $# -gt 2 && ! $2 =~ ^- && ! $3 =~ ^- ]]; then
			repoarr=( $1 $2 $3 )
			shift 3
		else
			repoarr=( $1 )
			shift
		fi
		parse_repo;;
esac
done
}

parse_file() {
if [[ -f "$sourcesfile" && `grep "deb http://" "$sourcesfile"` ]]; then
	while read line; do
		if [[ `cat /etc/apt/sources.list /etc/apt/sources.list.d/*.list | grep "$line"` || "$force" = "yes" ]]; then
			repoarr=( ${line} )
			parse_repo
			update_repo
		else
			show_error "Skipped ${line}"
		fi
	done < <(grep ^deb.*http\:\/\/ "$sourcesfile" | sed -e 's/deb //g')
	exit
else
	show_error "Error reading file!"
	exit 1
fi
}

parse_repo() {
repo=${repoarr[0]}
if [[ ${repoarr[0]} =~ ^ppa\:.*\/ ]]; then
	username="$(echo ${repo} | cut -f1 -d\/ | cut -f2 -d\:)"
	ppaname="$(echo ${repo} | cut -f2 -d\/)"
	repourl="http://ppa.launchpad.net/${username}/${ppaname}/ubuntu"
	fixname=$(echo ${username}-${ppaname} | sed -e 's/[.+]/_/g')
	# Try to find the codename from the list file
	ls /etc/apt/sources.list.d/${fixname}-*.list > /dev/null 2>&1
	if [[ $? -eq 0 ]]; then
		codename="$(cat /etc/apt/sources.list.d/${fixname}-*.list | head -1 | cut -f3 -d' ')"
	fi
elif [[ ${repoarr[0]} =~ ^http\:\/\/ ]]; then
	repourl="$(echo ${repo} | sed 's/\/$//')"
else
	show_error "Please pass a correct repository name or url as argument!"
	exit 1
fi
if [[ ${#repoarr[@]} -eq 3 ]]; then
	repo="${repoarr[0]} ${repoarr[1]} ${repoarr[2]}"
fi
}

update_repo() {
# Unset arrays
unset urls files
# Reset error counter
errors="0"
# Determine the file names
repofile="$(echo ${repourl} | sed 's/http:\/\///g' | sed 's/\//_/g')"
# Check if root
if [[ ! $(whoami) = "root" ]]; then
	show_error "Root access is needed to continue!"
	exit 1
fi
# Check if the repository is present or not
if [[ ! `cat /etc/apt/sources.list /etc/apt/sources.list.d/*.list | grep "deb ${repourl}/\? ${codename} ${section}"` && ! "$force" = "yes" ]]; then
	if [[ "$add" = "yes" ]]; then
		response="y"
	else
		show_error "The repository \"${repo}\" is not present on the system. Do you want to add it first? (y/n)"
		read response </dev/tty
	fi
	case $response in
		[yY])
			show_info "Adding the repository..."
			# Detect if add-apt-repository supports the -y argument
			add-apt-repository --help > "$helpcheck"
			if [[ `grep "\-y, --yes" "$helpcheck"` ]]; then
				add-apt-repository -y "$repo"
			else
				add-apt-repository "$repo"
			fi
			rm -f "$helpcheck";;
		*)
			show_error "You must add the repository to continue!"
			exit 1;;
	esac
fi
# Switch to a temporary directory
if [[ ! -d "$tempdir" ]]; then
	mkdir -p "$tempdir"
fi
if [[ -d "$tempdir" ]]; then
	cd "$tempdir"
else
	show_error "Failed to create temporary directory!"
	exit 1
fi
# Determine urls and file names
for arch in "${architectures[@]}"; do
	urls=( "${urls[@]}" "${repourl}/dists/${codename}/${section}/binary-${arch}/Packages.gz" )
	files=( "${files[@]}" "${repofile}_dists_${codename}_${section}_binary-${arch}_Packages" )
done
urls=( "${urls[@]}" "${repourl}/dists/${codename}/Release" "${repourl}/dists/${codename}/Release.gpg" "${repourl}/dists/${codename}/${section}/source/Sources.gz" )
files=( "${files[@]}" "${repofile}_dists_${codename}_Release" "${repofile}_dists_${codename}_Release.gpg" "${repofile}_dists_${codename}_${section}_source_Sources" )
# Fetch files to the temporary directory and move them
show_info "Updating repository \"${repo}\""
show_info "Fetching index files..."
for ((i=0; i < ${#urls[@]}; i++)); do
	if [[ ${urls[i]} =~ .gz$ ]]; then
		wget --no-check-certificate -nv "${urls[i]}" -O "${files[i]}".gz
		if [[ -s "${files[i]}".gz ]]; then
			gunzip -f "${files[i]}".gz
		fi
	else
		wget --no-check-certificate -nv "${urls[i]}" -O "${files[i]}"
	fi
	if [[ -s "${files[i]}" ]]; then
		mv -f "${files[i]}" "/var/lib/apt/lists/"
		if [[ ! -s "/var/lib/apt/lists/${files[i]}" ]]; then
			show_error "An error occured. Please retry :("
			exit 1
		fi
	else
		rm -f "${files[i]}"
		errors=$((errors+1))
	fi
done
# Show success message
if [[ "$errors" = "0" ]]; then
	show_success "The lists for the repository \"${repo}\" have been successfully updated!"
	return 0
else
	show_error "Some index files could not be downloaded or lost :("
	echo -e "Possible reasons may be,\n\t[*] The repository may not be available for your Ubuntu version.\n\t[*] Faulty or no internet connection.\nOld index files, if available, will be used instead."
	return 1
fi
}

initialize
parse_args "$@"
update_repo
